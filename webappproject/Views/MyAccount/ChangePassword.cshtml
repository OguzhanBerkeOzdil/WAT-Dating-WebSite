@model webappproject.MVVM.ChangePasswordVM

@{
    ViewData["Title"] = "Change Password - LoveConnect";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="change-password-container">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-lg-6 col-md-8">
                <div class="card border-0 shadow-lg">
                    <div class="card-header bg-gradient-primary text-white text-center py-4">
                        <h2 class="mb-0">
                            <i class="fas fa-shield-alt me-2"></i>
                            Change Password
                        </h2>
                        <p class="mb-0 mt-2 opacity-75">Update your password to keep your account secure</p>
                    </div>
                    
                    <div class="card-body p-5">
                        @if (TempData["Error"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @TempData["Error"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }

                        @if (TempData["Verity"] != null)
                        {
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <i class="fas fa-check-circle me-2"></i>
                                @TempData["Verity"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }

                        @using (Html.BeginForm("ChangePassword", "MyAccount", FormMethod.Post, new { @class = "change-password-form", @id = "changePasswordForm" }))
                        {
                            @Html.AntiForgeryToken()

                            <div class="mb-4">
                                <label for="oldPassword" class="form-label fw-semibold">
                                    <i class="fas fa-lock text-warning me-2"></i>Current Password
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fas fa-key"></i>
                                    </span>
                                    @Html.EditorFor(model => model.oldPassword, new { htmlAttributes = new { 
                                        @class = "form-control form-control-lg", 
                                        @type = "password",
                                        @id = "oldPassword",
                                        @placeholder = "Enter your current password",
                                        @autocomplete = "current-password"
                                    } })
                                    <button class="btn btn-outline-secondary" type="button" id="toggleOldPassword">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                @Html.ValidationMessageFor(model => model.oldPassword, "", new { @class = "text-danger small mt-1" })
                            </div>

                            <div class="mb-4">
                                <label for="newPassword" class="form-label fw-semibold">
                                    <i class="fas fa-key text-success me-2"></i>New Password
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fas fa-plus"></i>
                                    </span>
                                    @Html.EditorFor(model => model.newPassword, new { htmlAttributes = new { 
                                        @class = "form-control form-control-lg", 
                                        @type = "password",
                                        @id = "newPassword",
                                        @placeholder = "Enter your new password",
                                        @autocomplete = "new-password",
                                        @minlength = "6"
                                    } })
                                    <button class="btn btn-outline-secondary" type="button" id="toggleNewPassword">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                @Html.ValidationMessageFor(model => model.newPassword, "", new { @class = "text-danger small mt-1" })
                                <div class="form-text small mt-1 text-muted">Password must be at least 6 characters long</div>
                            </div>

                            <div class="mb-4">
                                <label for="newPasswordConfirmation" class="form-label fw-semibold">
                                    <i class="fas fa-check-double text-info me-2"></i>Confirm New Password
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fas fa-check"></i>
                                    </span>
                                    @Html.EditorFor(model => model.newPasswordConfirmation, new { htmlAttributes = new { 
                                        @class = "form-control form-control-lg", 
                                        @type = "password",
                                        @id = "newPasswordConfirmation",
                                        @placeholder = "Confirm your new password",
                                        @autocomplete = "new-password"
                                    } })
                                    <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                @Html.ValidationMessageFor(model => model.newPasswordConfirmation, "", new { @class = "text-danger small mt-1" })
                            </div>

                            <div class="mb-4">
                                <div class="form-text small text-muted">
                                    <i class="fas fa-shield-alt me-1"></i>Choose a strong password with a mix of letters, numbers, and special characters.
                                </div>
                            </div>

                            <div class="d-grid gap-2 mb-4">
                                <button type="submit" class="btn btn-primary btn-lg">
                                    <i class="fas fa-save me-2"></i>Update Password
                                </button>
                            </div>
                            
                            <div class="text-center">
                                <a href="@Url.Action("Index", "MyAccount")" class="btn btn-outline-secondary">
                                    <i class="fas fa-arrow-left me-2"></i>Back to Profile
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Password toggle functionality
document.getElementById('toggleOldPassword')?.addEventListener('click', function() {
    togglePasswordVisibility('oldPassword', this);
});

document.getElementById('toggleNewPassword')?.addEventListener('click', function() {
    togglePasswordVisibility('newPassword', this);
});

document.getElementById('toggleConfirmPassword')?.addEventListener('click', function() {
    togglePasswordVisibility('newPasswordConfirmation', this);
});

function togglePasswordVisibility(fieldId, button) {
    const field = document.getElementById(fieldId);
    const icon = button.querySelector('i');
    
    if (field.type === 'password') {
        field.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
    } else {
        field.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
    }
}

// Password confirmation validation
document.getElementById('newPasswordConfirmation')?.addEventListener('input', function() {
    const password = document.getElementById('newPassword').value;
    const confirmation = this.value;
    
    if (password !== confirmation) {
        this.setCustomValidity('Passwords do not match');
    } else {
        this.setCustomValidity('');
    }
});
</script>
