@model List<webappproject.Models.User>

@{
    ViewData["Title"] = "Discover Your Match - LoveConnect";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="discovery-container">
    <!-- Header Section -->
    <div class="discovery-header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h1 class="discovery-title">
                        <i class="fas fa-fire"></i> Discover Love
                    </h1>
                    <p class="discovery-subtitle">Swipe right to like, left to pass</p>
                </div>
                <div class="col-md-6 text-end">
                    <div class="action-buttons">
                        <button class="btn btn-filters" onclick="showFilters()">
                            <i class="fas fa-sliders-h"></i> Filters
                        </button>
                        <a href="@Url.Action("Matches", "User")" class="btn btn-matches">
                            <i class="fas fa-heart"></i> Matches
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Swipe Cards Container -->
    <div class="swipe-container">
        <div class="card-stack" id="cardStack">
            @if (Model != null && Model.Count > 0)
            {
                @for (int i = 0; i < Math.Min(Model.Count, 10); i++)
                {
                    var user = Model[i];
                    <div class="swipe-card" id="card@(i)" data-user-id="@user.Id" style="z-index: @(10 - i);">
                        <div class="card-image">
                            <div class="profile-icon">
                                <i class="fas fa-user-circle"></i>
                            </div>
                            <img src="@user.ImagePath" alt="@user.Name @user.Surname" onerror="this.style.display='none'">
                            <div class="card-overlay">
                                <div class="card-info">
                                    <h3 class="card-name">@user.Name @user.Surname</h3>
                                    <p class="card-age"><i class="fas fa-birthday-cake"></i> @user.Age years old</p>
                                    <p class="card-location"><i class="fas fa-map-marker-alt"></i> @(new Random().Next(1, 15)) km away</p>
                                    <div class="card-tags">
                                        @if (!string.IsNullOrEmpty(user.Tag1))
                                        {
                                            <span class="tag"><i class="fas fa-tag"></i> @user.Tag1</span>
                                        }
                                        @if (!string.IsNullOrEmpty(user.Tag2))
                                        {
                                            <span class="tag"><i class="fas fa-tag"></i> @user.Tag2</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-details">
                            <div class="card-bio">
                                <p><i class="fas fa-quote-left"></i> @(string.IsNullOrEmpty(user.Biography) ? "No bio available" : user.Biography)</p>
                            </div>
                            <div class="card-actions">
                                <button class="action-btn pass-btn" onclick="swipeCard('left', 'card@(i)')" title="Pass">
                                    <i class="fas fa-times"></i>
                                </button>
                                <button class="action-btn super-like-btn" onclick="superLike('card@(i)')" title="Super Like">
                                    <i class="fas fa-star"></i>
                                </button>
                                <button class="action-btn like-btn" onclick="swipeCard('right', 'card@(i)')" title="Like">
                                    <i class="fas fa-heart"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <!-- No profiles available -->
                <div class="no-profiles-card">
                    <div class="no-profiles-content">
                        <div class="no-profiles-icon">
                            <i class="fas fa-search"></i>
                        </div>
                        <h3>No more profiles</h3>
                        <p>Check back later for new people to discover!</p>
                        <button class="btn btn-primary" onclick="location.reload()">
                            <i class="fas fa-refresh"></i> Refresh
                        </button>
                    </div>
                </div>
            }
        </div>

        <!-- Action buttons for mobile -->
        <div class="mobile-actions d-block d-md-none">
            <button class="mobile-action-btn pass-btn" onclick="swipeTopCard('left')" title="Pass">
                <i class="fas fa-times"></i>
            </button>
            <button class="mobile-action-btn super-like-btn" onclick="superLikeTopCard()" title="Super Like">
                <i class="fas fa-star"></i>
            </button>
            <button class="mobile-action-btn like-btn" onclick="swipeTopCard('right')" title="Like">
                <i class="fas fa-heart"></i>
            </button>
        </div>
    </div>

    <!-- Match Notification -->
    <div class="match-notification" id="matchNotification">
        <div class="match-content">
            <div class="match-icon">
                <i class="fas fa-heart"></i>
            </div>
            <h3>It's a Match! 💕</h3>
            <p>You and <span id="matchName"></span> liked each other!</p>
            <div class="match-actions">
                <button class="btn btn-outline-light" onclick="closeMatchNotification()">Keep Swiping</button>
                <button class="btn btn-light" onclick="sendMessage()">Send Message</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentCardIndex = 0;
        let totalCards = @(Model?.Count ?? 0);
        let isAnimating = false;

        function swipeCard(direction, cardId) {
            if (isAnimating) return;
            
            const card = document.getElementById(cardId);
            if (!card) return;
            
            isAnimating = true;
            
            const translateX = direction === 'right' ? '100vw' : '-100vw';
            const rotation = direction === 'right' ? '30deg' : '-30deg';
            
            card.style.transform = `translateX(${translateX}) rotate(${rotation})`;
            card.style.opacity = '0';
            
            setTimeout(() => {
                card.remove();
                currentCardIndex++;
                isAnimating = false;
                
                if (direction === 'right') {
                    showMatchChance();
                }
                
                if (currentCardIndex >= totalCards) {
                    showNoMoreCards();
                }
            }, 300);
        }

        function swipeTopCard(direction) {
            const topCard = document.querySelector('.swipe-card:last-child');
            if (topCard) {
                swipeCard(direction, topCard.id);
            }
        }

        function superLike(cardId) {
            if (isAnimating) return;
            
            const card = document.getElementById(cardId);
            if (!card) return;
            
            isAnimating = true;
            
            card.style.transform = 'translateY(-100vh) scale(0.8)';
            card.style.opacity = '0';
            
            setTimeout(() => {
                card.remove();
                currentCardIndex++;
                isAnimating = false;
                showMatchChance();
                
                if (currentCardIndex >= totalCards) {
                    showNoMoreCards();
                }
            }, 300);
        }

        function superLikeTopCard() {
            const topCard = document.querySelector('.swipe-card:last-child');
            if (topCard) {
                superLike(topCard.id);
            }
        }

        function showMatchChance() {
            // 30% chance of showing match notification
            if (Math.random() < 0.3) {
                const names = ['Emma', 'Olivia', 'Sophia', 'Isabella', 'Charlotte'];
                const randomName = names[Math.floor(Math.random() * names.length)];
                
                document.getElementById('matchName').textContent = randomName;
                document.getElementById('matchNotification').classList.add('show');
            }
        }

        function closeMatchNotification() {
            document.getElementById('matchNotification').classList.remove('show');
        }

        function sendMessage() {
            closeMatchNotification();
            alert('Messaging feature coming soon!');
        }

        function showNoMoreCards() {
            const cardStack = document.getElementById('cardStack');
            cardStack.innerHTML = `
                <div class="no-profiles-card">
                    <div class="no-profiles-content">
                        <div class="no-profiles-icon">
                            <i class="fas fa-heart-broken"></i>
                        </div>
                        <h3>That's everyone for now!</h3>
                        <p>Check back later for new profiles or expand your search criteria.</p>
                        <button class="btn btn-primary" onclick="location.reload()">
                            <i class="fas fa-refresh"></i> Refresh
                        </button>
                    </div>
                </div>
            `;
        }

        function showFilters() {
            alert('Filters feature coming soon!');
        }

        // Touch/Swipe support for mobile
        let startX = 0;
        let startY = 0;
        let currentX = 0;
        let currentY = 0;
        let isDragging = false;

        document.addEventListener('touchstart', handleTouchStart, { passive: true });
        document.addEventListener('touchmove', handleTouchMove, { passive: true });
        document.addEventListener('touchend', handleTouchEnd, { passive: true });

        function handleTouchStart(e) {
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
            isDragging = true;
        }

        function handleTouchMove(e) {
            if (!isDragging) return;
            
            currentX = e.touches[0].clientX;
            currentY = e.touches[0].clientY;
            
            const deltaX = currentX - startX;
            const deltaY = currentY - startY;
            
            const topCard = document.querySelector('.swipe-card:last-child');
            if (topCard && Math.abs(deltaX) > Math.abs(deltaY)) {
                const rotation = deltaX * 0.1;
                topCard.style.transform = `translateX(${deltaX * 0.5}px) rotate(${rotation}deg)`;
                topCard.style.opacity = 1 - Math.abs(deltaX) / 300;
            }
        }

        function handleTouchEnd(e) {
            if (!isDragging) return;
            isDragging = false;
            
            const deltaX = currentX - startX;
            const topCard = document.querySelector('.swipe-card:last-child');
            
            if (topCard) {
                if (Math.abs(deltaX) > 100) {
                    // Swipe threshold reached
                    const direction = deltaX > 0 ? 'right' : 'left';
                    swipeCard(direction, topCard.id);
                } else {
                    // Snap back
                    topCard.style.transform = '';
                    topCard.style.opacity = '';
                }
            }
        }

        // Keyboard support
        document.addEventListener('keydown', function(e) {
            const topCard = document.querySelector('.swipe-card:last-child');
            if (!topCard) return;
            
            switch(e.key) {
                case 'ArrowLeft':
                    swipeCard('left', topCard.id);
                    break;
                case 'ArrowRight':
                    swipeCard('right', topCard.id);
                    break;
                case 'ArrowUp':
                    superLike(topCard.id);
                    break;
            }
        });
    </script>
}

<style>
.discovery-container {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
}

.discovery-header {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    padding: 2rem 0;
}

.discovery-title {
    color: white;
    font-weight: 700;
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
}

.discovery-subtitle {
    color: white;
    font-size: 1.1rem;
    margin: 0;
    font-weight: 500;
}

.action-buttons {
    display: flex;
    gap: 1rem;
}

.btn-filters, .btn-matches {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.3);
    padding: 0.75rem 1.5rem;
    border-radius: 50px;
    font-weight: 600;
    transition: all 0.3s ease;
    text-decoration: none;
}

.btn-filters:hover, .btn-matches:hover {
    background: rgba(255, 255, 255, 0.3);
    border-color: rgba(255, 255, 255, 0.5);
    transform: translateY(-2px);
    color: white;
    text-decoration: none;
}

.swipe-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 70vh;
    padding: 2rem;
}

.card-stack {
    position: relative;
    width: 400px;
    height: 600px;
}

.swipe-card {
    position: absolute;
    width: 100%;
    height: 100%;
    background: white;
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    cursor: grab;
    transition: transform 0.3s ease, opacity 0.3s ease;
    user-select: none;
}

.swipe-card:active {
    cursor: grabbing;
}

.card-image {
    position: relative;
    height: 70%;
    overflow: hidden;
}

.profile-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 8rem;
    color: #667eea;
    z-index: 1;
}

.card-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: relative;
    z-index: 2;
}

.card-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
    color: white;
    padding: 2rem 1.5rem 1.5rem;
}

.card-name {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
}

.card-age, .card-location {
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
    opacity: 0.9;
}

.card-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
}

.tag {
    background: rgba(255, 255, 255, 0.2);
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-size: 0.8rem;
    backdrop-filter: blur(10px);
}

.card-details {
    padding: 1.5rem;
    height: 30%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.card-bio {
    flex: 1;
    display: flex;
    align-items: center;
}

.card-bio p {
    color: #4a5568;
    font-size: 0.9rem;
    line-height: 1.4;
    margin: 0;
}

.card-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
}

.action-btn {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.pass-btn {
    background: linear-gradient(135deg, #ff6b6b, #ee5a24);
}

.super-like-btn {
    background: linear-gradient(135deg, #3742fa, #2f3542);
}

.like-btn {
    background: linear-gradient(135deg, #2ecc71, #27ae60);
}

.action-btn:hover {
    transform: scale(1.1);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
}

.mobile-actions {
    position: fixed;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 1rem;
    z-index: 1000;
}

.mobile-action-btn {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    border: none;
    color: white;
    font-size: 1.2rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.no-profiles-card {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    background: white;
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
}

.no-profiles-content {
    text-align: center;
    padding: 2rem;
}

.no-profiles-icon {
    font-size: 4rem;
    color: #cbd5e0;
    margin-bottom: 1rem;
}

.no-profiles-content h3 {
    color: #2d3748;
    margin-bottom: 1rem;
}

.no-profiles-content p {
    color: #718096;
    margin-bottom: 2rem;
}

.match-notification {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.match-notification.show {
    opacity: 1;
    visibility: visible;
}

.match-content {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    padding: 3rem;
    border-radius: 20px;
    text-align: center;
    max-width: 400px;
    margin: 1rem;
}

.match-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    animation: pulse 2s infinite;
}

@@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
}

.match-content h3 {
    margin-bottom: 1rem;
    font-size: 2rem;
}

.match-content p {
    margin-bottom: 2rem;
    font-size: 1.1rem;
}

.match-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
}

.match-actions .btn {
    border-radius: 50px;
    padding: 0.75rem 1.5rem;
    font-weight: 600;
}

@@media (max-width: 768px) {
    .card-stack {
        width: 320px;
        height: 500px;
    }
    
    .discovery-title {
        font-size: 2rem;
    }
    
    .action-buttons {
        margin-top: 1rem;
        justify-content: center;
    }
    
    .swipe-container {
        padding: 1rem;
    }
}
</style>

