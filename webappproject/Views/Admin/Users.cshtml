@model List<webappproject.Models.User>

@{
    ViewData["Title"] = "User Management - Admin Panel";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@* Anti-forgery token for AJAX requests *@
@Html.AntiForgeryToken()

<div class="admin-container">
    <div class="container">
        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col-md-8">
                <h1 class="admin-page-title">
                    <i class="fas fa-users"></i> User Management
                </h1>
                <p class="admin-page-subtitle">Manage all registered users</p>
            </div>
            <div class="col-md-4 text-end">
                <a href="@Url.Action("Index", "Admin")" class="btn btn-outline-light">
                    <i class="fas fa-arrow-left"></i> Back to Dashboard
                </a>
            </div>
        </div>
        <!-- Filters -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="filter-card">
                    <form method="get" class="row g-3">
                        <div class="col-md-4">
                            <label for="search" class="form-label">Search Users</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" id="search" name="search" value="@ViewBag.Search" placeholder="Search by name or email...">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label for="roleFilter" class="form-label">Role Filter</label>
                            <select class="form-select" id="roleFilter" name="roleFilter">
                                <option value="">All Roles</option>
                                <option value="User" selected="@(ViewBag.RoleFilter == "User")">Users</option>
                                <option value="Premium" selected="@(ViewBag.RoleFilter == "Premium")">Premium</option>
                                <option value="Admin" selected="@(ViewBag.RoleFilter == "Admin")">Admin</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="statusFilter" class="form-label">Status Filter</label>
                            <select class="form-select" id="statusFilter" name="statusFilter">
                                <option value="">All Status</option>
                                <option value="Active" selected="@(ViewBag.StatusFilter == "Active")">Active</option>
                                <option value="Inactive" selected="@(ViewBag.StatusFilter == "Inactive")">Inactive</option>
                                <option value="Banned" selected="@(ViewBag.StatusFilter == "Banned")">Banned</option>
                            </select>
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button type="submit" class="btn btn-primary w-100">
                                <i class="fas fa-filter"></i> Filter
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Users Table -->
        <div class="row">
            <div class="col-12">
                <div class="table-card">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Profile</th>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Age</th>
                                    <th>Role</th>
                                    <th>Status</th>
                                    <th>Last Login</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model?.Count > 0)
                                {
                                    @foreach (var user in Model)
                                    {
                                        <tr>
                                            <td>
                                                <div class="user-avatar">
                                                    @if (!string.IsNullOrEmpty(user.ImagePath))
                                                    {
                                                        <img src="@user.ImagePath" alt="@user.Name" class="avatar-img" 
                                                             onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                                                    }
                                                    <div class="avatar-placeholder" style="@(string.IsNullOrEmpty(user.ImagePath) ? "" : "display:none")">
                                                        <i class="fas fa-user"></i>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="user-name">
                                                    <strong>@user.Name @user.Surname</strong>
                                                    <small class="text-muted d-block">ID: @user.Id</small>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="user-email">@user.Email</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-info">@user.Age</span>
                                            </td>
                                            <td>
                                                <span class="badge @(user.Rol?.Name == "Premium" ? "bg-warning" : "bg-secondary")">
                                                    @(user.Rol?.Name ?? "User")
                                                </span>
                                            </td>
                                            <td>
                                                @{
                                                    var isBanned = ViewBag.BannedUsers != null && ((List<int>)ViewBag.BannedUsers).Contains(user.Id);
                                                }
                                                @if (isBanned)
                                                {
                                                    <span class="badge bg-danger">
                                                        <i class="fas fa-ban"></i> Banned
                                                    </span>
                                                }
                                                else if (user.IsActive)
                                                {
                                                    <span class="badge bg-success">
                                                        <i class="fas fa-check-circle"></i> Active
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning">
                                                        <i class="fas fa-pause-circle"></i> Inactive
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                <small class="text-muted">
                                                    @user.LastLoginDate.ToString("dd/MM/yyyy")
                                                </small>
                                            </td>
                                            <td>
                                                <div class="btn-group">
                                                    <button type="button" class="btn btn-sm btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown">
                                                        Actions
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li>
                                                            <a class="dropdown-item" href="@Url.Action("UserDetails", "Admin", new { id = user.Id })">
                                                                <i class="fas fa-eye"></i> View Details
                                                            </a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="@Url.Action("EditUser", "Admin", new { id = user.Id })">
                                                                <i class="fas fa-edit"></i> Edit User
                                                            </a>
                                                        </li>
                                                        <li>
                                                            <button class="dropdown-item" onclick="toggleUserStatus(@user.Id, @user.IsActive.ToString().ToLower())">
                                                                <i class="fas fa-@(user.IsActive ? "pause" : "play")"></i> 
                                                                @(user.IsActive ? "Deactivate" : "Activate")
                                                            </button>
                                                        </li>
                                                        <li><hr class="dropdown-divider"></li>
                                                        @if (isBanned)
                                                        {
                                                            <li>
                                                                <button class="dropdown-item text-success" onclick="unbanUser(@user.Id)">
                                                                    <i class="fas fa-unlock"></i> Unban User
                                                                </button>
                                                            </li>
                                                        }
                                                        else
                                                        {
                                                            <li>
                                                                <button class="dropdown-item text-warning" onclick="showBanModal(@user.Id)">
                                                                    <i class="fas fa-ban"></i> Ban User
                                                                </button>
                                                            </li>
                                                        }
                                                        <li><hr class="dropdown-divider"></li>
                                                        <li>
                                                            <button class="dropdown-item text-danger" onclick="deleteUser(@user.Id)">
                                                                <i class="fas fa-trash"></i> Delete User
                                                            </button>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="8" class="text-center py-4">
                                            <div class="empty-state">
                                                <i class="fas fa-users fa-3x text-muted mb-3"></i>
                                                <h5 class="text-muted">No users found</h5>
                                                <p class="text-muted">Try adjusting your search criteria</p>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination -->
                    @if (ViewBag.TotalPages > 1)
                    {
                        <nav aria-label="Users pagination">
                            <ul class="pagination justify-content-center">
                                @for (int i = 1; i <= ViewBag.TotalPages; i++)
                                {
                                    <li class="page-item @(i == ViewBag.CurrentPage ? "active" : string.Empty)">
                                        <a class="page-link" href="@Url.Action("Users", new { page = i, search = ViewBag.Search, roleFilter = ViewBag.RoleFilter, statusFilter = ViewBag.StatusFilter })">@i</a>
                                    </li>
                                }
                            </ul>
                        </nav>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
@if (TempData["Success"] != null)
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast show" role="alert">
            <div class="toast-header bg-success text-white">
                <i class="fas fa-check-circle me-2"></i>
                <strong class="me-auto">Success</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">
                @TempData["Success"]
            </div>
        </div>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast show" role="alert">
            <div class="toast-header bg-danger text-white">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <strong class="me-auto">Error</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">
                @TempData["Error"]
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        let userToBan = 0;

        function showBanModal(userId) {
            userToBan = userId;
            // Create modal HTML if it doesn't exist
            if (!document.getElementById('banModal')) {
                const modalHtml = `
                    <div class="modal fade" id="banModal" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Ban User</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="mb-3">
                                        <label for="banReason" class="form-label">Reason for banning:</label>
                                        <textarea class="form-control" id="banReason" rows="3" placeholder="Enter reason for banning this user..."></textarea>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-danger" onclick="confirmBan()">Ban User</button>
                                </div>
                            </div>
                        </div>
                    </div>`;
                document.body.insertAdjacentHTML('beforeend', modalHtml);
            }
            new bootstrap.Modal(document.getElementById('banModal')).show();
        }

        function confirmBan() {
            const reason = document.getElementById('banReason').value;
            banUser(userToBan, reason);
        }

        async function toggleUserStatus(userId, isActive) {
            if (!confirm(`Are you sure you want to ${isActive ? 'deactivate' : 'activate'} this user?`)) return;
            
            try {
                const response = await fetch('/Admin/ToggleUserStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `userId=${userId}`
                });

                const result = await response.json();
                
                if (result.success) {
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                alert('An error occurred while updating user status.');
            }
        }
        
        async function banUser(userId, reason) {
            try {
                const response = await fetch(`/Admin/BanUser/${userId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ reason: reason || 'Banned by administrator' })
                });

                const result = await response.json();
                
                if (result.success) {
                    bootstrap.Modal.getInstance(document.getElementById('banModal')).hide();
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                alert('An error occurred while banning the user.');
            }
        }
        
        async function unbanUser(userId) {
            if (!confirm('Are you sure you want to unban this user?')) return;
            
            try {
                const response = await fetch('/Admin/UnbanUser', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `userId=${userId}`
                });

                const result = await response.json();
                
                if (result.success) {
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                alert('An error occurred while unbanning the user.');
            }
        }

        async function deleteUser(userId) {
            if (!confirm('Are you sure you want to permanently delete this user? This action cannot be undone.')) return;
            
            try {
                const response = await fetch(`/Admin/DeleteUser/${userId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const result = await response.json();
                
                if (result.success) {
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                alert('An error occurred while deleting the user.');
            }
        }

        // Initialize tooltips
        document.addEventListener('DOMContentLoaded', function() {
            // Set filter values from ViewBag
            var roleFilter = '@ViewBag.RoleFilter';
            var statusFilter = '@ViewBag.StatusFilter';
            
            if (roleFilter) {
                document.getElementById('roleFilter').value = roleFilter;
            }
            if (statusFilter) {
                document.getElementById('statusFilter').value = statusFilter;
            }
            
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
}

<style>
.admin-container {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 2rem 0;
}

.admin-header {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    padding: 2rem 0;
    margin-bottom: 2rem;
}

.admin-title {
    color: white;
    font-weight: 700;
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
}

.admin-subtitle {
    color: rgba(255, 255, 255, 0.8);
    font-size: 1.1rem;
    margin: 0;
}

.filter-card, .table-card {
    background: white;
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    border: none;
}

.user-avatar {
    width: 50px;
    height: 50px;
    position: relative;
}

.avatar-img {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    object-fit: cover;
}

.avatar-placeholder {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea, #764ba2);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.5rem;
}

.user-name strong {
    color: #2d3748;
    font-weight: 600;
}

.user-email {
    color: #718096;
    font-size: 0.9rem;
}

.table th {
    background: #f8f9fa;
    border: none;
    font-weight: 600;
    color: #2d3748;
    padding: 1rem 0.75rem;
}

.table td {
    border: none;
    padding: 1rem 0.75rem;
    vertical-align: middle;
}

.table tbody tr {
    border-bottom: 1px solid #e2e8f0;
    transition: all 0.3s ease;
}

.table tbody tr:hover {
    background: #f8f9fa;
    transform: translateY(-1px);
}

.empty-state {
    padding: 3rem;
}

.badge {
    font-size: 0.8rem;
    padding: 0.5rem 0.75rem;
    border-radius: 20px;
}

.btn-group .dropdown-menu {
    border: none;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    padding: 0.5rem 0;
}

.dropdown-item {
    padding: 0.75rem 1.5rem;
    transition: all 0.3s ease;
}

.dropdown-item:hover {
    background: #f8f9fa;
    transform: translateX(5px);
}

.pagination .page-link {
    border: none;
    color: #667eea;
    font-weight: 500;
    margin: 0 0.25rem;
    border-radius: 10px;
}

.pagination .page-item.active .page-link {
    background: linear-gradient(135deg, #667eea, #764ba2);
    border: none;
}

.toast {
    border: none;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    border-radius: 15px;
}
</style>
